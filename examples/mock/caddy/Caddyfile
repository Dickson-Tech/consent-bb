{$SITE_ADDRESS}:80,
{$SITE_ADDRESS}:443,
{$INTERNAL_SITE_ADDRESS}:80,
{$INTERNAL_SITE_ADDRESS}:443 {

  @api {
    path /api/*
  }

  # Makes it easier to write static responses later
  root * /static-reponses/

  route @api {
    uri strip_prefix /api

    # Static responses that take precedence over the Django application.
    # These are examples from a former approach.
    #
    # We don't currently use static mocks.
    handle /service/policy/123456/ {
        header "Content-Type" "application/json"
        rewrite * "service-policy-123456.json"
        file_server
    }
    handle /service/agreement/123456/ {
        header "Content-Type" "application/json"
        rewrite * "service-agreement-123456-mcc.json"
        file_server
    }

    handle /service/agreement/123456/agreementdata/ {
        header "Content-Type" "application/json"
        rewrite * "service-agreement-123456-agreementdata.json"
        file_server
    }

    reverse_proxy {
      to http://consent:8000
    }
    openapi {
      spec /consent-openapi.yaml
      log_error
      check {
        req_params req_body
        # When we are ready to handle validation of the body:
        # req_params req_body resp_body
      }
      validate_servers
    }
  }


  handle_errors {
    respond @api "Resource: {http.request.orig_uri}. Error: {openapi.error}" {openapi.status_code}  {
      close
    }
  }

  respond "all is OK"
}
